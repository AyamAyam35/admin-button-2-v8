// SPDX-License-Identifier: GPL-3.0
package adminbutton2.ui;

import arc.Core;
import arc.graphics.Pixmap;
import arc.graphics.PixmapIO;
import arc.math.Mathf;
import arc.scene.ui.Label;
import arc.scene.ui.TextField;
import arc.struct.Seq;
import arc.struct.StringMap;
import mindustry.Vars;
import mindustry.content.Blocks;
import mindustry.game.Schematic;
import mindustry.type.Item;
import mindustry.ui.dialogs.BaseDialog;

import java.nio.ByteBuffer;

import adminbutton2.AdminVars;

public class ImageGeneratorDialog extends BaseDialog {
    private int x, y, n, imageWidth = 0, imageHeight = 0, imageWidthTarget = 0, imageHeightTarget = 0;
    private Seq<Item> items;
    private float scaleDown = 1;
    private Pixmap pixmap;
    private TextField imageWidthField;
    private TextField imageHeightField;
    private Label sizeLabel = new Label("");
    private Schematic schematic = new Schematic(new Seq<>(), new StringMap(), 0, 0);

    public ImageGeneratorDialog() {
        super("@adminbutton2.imagegenerator.title");
        addCloseButton();
        items = Vars.content.items();
        cont.table(t -> {
            t.button("@adminbutton2.imagegenerator.selectimage", () -> loadImage()).get().getLabel().setWrap(false);
            t.button("@adminbutton2.imagegenerator.generate", () -> {
                if (imageWidthTarget > Vars.maxSchematicSize && imageHeightTarget > Vars.maxSchematicSize) {
                    Vars.ui.showConfirm("@adminbutton2.imagegenerator.toolarge", () -> {
                        generateImage();
                    });
                } else generateImage();
            }).get().getLabel().setWrap(false);
        });
        cont.row();
        cont.table(t -> {
            t.add("@width");
            imageWidthField = t.field("0", s -> {
                try {
                    n = Integer.parseInt(s);
                } catch (NumberFormatException e) {
                    n = 0;
                }
                scaleDown = (float)imageWidth / (float)n;
                updateSize();
            }).get();
            t.row();
            t.add("@height");
            imageHeightField = t.field("0", s -> {
                try {
                    n = Integer.parseInt(s);
                } catch (NumberFormatException e) {
                    n = 0;
                }
                scaleDown = (float)imageHeight / (float)n;
                updateSize();
            }).get();
        }).row();
        cont.add(sizeLabel);
        updateSize();
    }

    private void updateSize() {
        imageWidthTarget = Mathf.round(imageWidth / scaleDown);
        imageHeightTarget = Mathf.round(imageHeight / scaleDown);
        imageWidthField.setText(String.valueOf(imageWidthTarget));
        imageHeightField.setText(String.valueOf(imageHeightTarget));
        sizeLabel.setText(Core.bundle.format("adminbutton2.imagegenerator.size", imageWidthTarget, imageHeightTarget));
    }

    private void loadImage() {
        Vars.platform.showFileChooser(true, "png", file -> {
            try {
                pixmap = PixmapIO.readPNG(file).flipY();
            } catch (Throwable e) {
                Vars.ui.showException(e);
                return;
            }
            imageHeight = pixmap.height;
            imageWidth = pixmap.width;
            scaleDown = 1;
            updateSize();
        });
    }

    private void generateImage() {
        Seq<Schematic.Stile> tiles = new Seq<Schematic.Stile>();
        try {
            for (x = 0; x < imageWidthTarget; x++) {
                for (y = 0; y < imageHeightTarget; y++) {
                    Item item = items.min(it -> {
                        ByteBuffer p = pixmap.pixels;
                        int offset = (Mathf.floor(x * scaleDown) + Mathf.floor(y * scaleDown) * pixmap.width) * 4;
                        int dr = Mathf.round(it.color.r * 255) - (p.get(offset) & 0xff);
                        int dg = Mathf.round(it.color.g * 255) - (p.get(offset + 1) & 0xff);
                        int db = Mathf.round(it.color.b * 255) - (p.get(offset + 2) & 0xff);
                        return dr*dr + dg*dg + db*db;
                    });
                    tiles.add(new Schematic.Stile(Blocks.sorter, x, y, (Object)item, (byte)0));
                }
            }
        } catch (Throwable e) {
            Vars.ui.showException(e);
            return;
        }
        if (tiles.size == 0) return;
        tiles.get(0).set(new Schematic.Stile(Blocks.message, 0, 0, (Object)"[stat]Generated by mod \"Admin Button 2\"", (byte)0));
        StringMap tags = new StringMap();
        tags.put("name", "!!!Admin Button 2");
        tags.put("description", "Generated by mod \"Admin Button 2\"");
        schematic = new Schematic(tiles, tags, imageWidthTarget, imageHeightTarget);
        if (imageWidthTarget <= Vars.maxSchematicSize && imageHeightTarget <= Vars.maxSchematicSize) Vars.schematics.add(schematic);
        AdminVars.image.hide();
        AdminVars.admin.hide();
        Vars.control.input.useSchematic(schematic);
    }
}
